<launch>

  <arg name="gdb_settings"                      default="" />
  <arg name="planning_context_launch"           default="" />
  <arg name="planning_pipeline_launch"          default="" />
  <arg name="trajectory_execution_launch"       default="" />
  <arg name="sensor_manager_launch"             default="" />
  <arg name="robot_sensor_manager_launch"       default="" />
  <arg name="robot_urdf"                        default=""/>
  <arg name="robot_srdf"                        default=""/>
  <arg name="robot_joint_limits_yaml"           default=""/>
  <arg name="kinematics_yaml"                   default=""/>
  <arg name="robot_controller_manager_launch"   default=""/>
  <arg name="robot_controllers"                 default=""/>
  <arg name="robot_fake_controllers"            default=""/>
  <arg name="sensors_3d_yaml"                   default=""/>

  <!-- GDB Debug Option -->
  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix"
	   value="gdb -x $(arg gdb_settings) --ex run --args" />

  <!-- Verbose Mode Option -->
  <arg name="info" default="$(arg debug)" />
  <arg unless="$(arg info)" name="command_args" value="" />
  <arg     if="$(arg info)" name="command_args" value="--debug" />
  <!-- move_group settings -->
  <arg name="allow_trajectory_execution" default="true"/>
  <arg name="fake_execution" default="false"/>
  <arg name="max_safe_path_cost" default="1"/>
  <arg name="jiggle_fraction" default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true"/>

  <arg name="capabilities" default=""/>
  <arg name="disable_capabilities" default=""/>
  <arg name="robot_name" default=""/>
  <arg name="robot_model" default=""/>
  <arg name="base_link_frame" default=""/>
  <arg name="external_srdf_loc" default=""/>


  <include file="$(arg planning_context_launch)">
    <arg name="robot_name"              value="$(arg robot_name)"/>
    <arg name="robot_model"             value="$(arg robot_model)"/>
    <arg name="base_link_frame"         value="$(arg base_link_frame)"/>
    <arg name="external_srdf_loc"       value="$(arg external_srdf_loc)"/>
    <arg name="robot_urdf"              value="$(arg robot_urdf)"/>
    <arg name="robot_srdf"              value="$(arg robot_srdf)"/>
    <arg name="robot_joint_limits_yaml" value="$(arg robot_joint_limits_yaml)"/>
    <arg name="kinematics_yaml"         value="$(arg kinematics_yaml)"/>
    <!-- <arg name="sensors_3d_yaml"         value="$(arg sensors_3d_yaml)"/> -->

  </include>

    <!-- Planning Functionality -->
    <include ns="move_group" file="$(arg planning_pipeline_launch)">
      <arg name="pipeline" value="ompl" />
    </include>

    <!-- Trajectory Execution Functionality -->
    <include ns="move_group" file="$(arg trajectory_execution_launch)" if="$(arg allow_trajectory_execution)">
      <arg name="fake_execution"                    value="$(arg fake_execution)"/>
      <arg name="robot_model"                       value="$(arg robot_model)"/>
      <arg name="robot_controller_manager_launch"   value="$(arg robot_controller_manager_launch)"/>
      <arg name="robot_controllers"                 value="$(arg robot_controllers)"/>
      <arg name="robot_fake_controllers"            value="$(arg robot_fake_controllers)"/>
    </include>

    <!-- Sensors Functionality -->
    <include ns="move_group" file="$(arg sensor_manager_launch)" if="$(arg allow_trajectory_execution)">
      <arg name="robot_name" value="$(arg robot_name)" />
      <arg name="base_link_frame" value="$(arg base_link_frame)"/>
      <arg name="robot_sensor_manager_launch" value="$(arg robot_sensor_manager_launch)"/>
      <arg name="sensors_3d_yaml" value="$(arg sensors_3d_yaml)"/>
      
    </include>

    <!-- Start the actual move_group node/action server -->
    <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
      <!-- Set the display variable, in case OpenGL code is used internally -->
      <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

      <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
      <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
      <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />
      <param name="capabilities" value="$(arg capabilities)"/>
      <param name="disable_capabilities" value="$(arg disable_capabilities)"/>

      <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
      <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
      <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
      <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
      <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
    </node>

</launch>
