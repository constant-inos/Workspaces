#!/usr/bin/env python
import math
import sys
import copy
import rospy
import random
import time
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
## Import msgs and srvs ##
from moveit_msgs.msg import Grasp, PlaceLocation
from std_msgs.msg import String, Float64, Header
from geometry_msgs.msg import Pose,PoseStamped
from trajectory_msgs.msg import JointTrajectoryPoint
from moveit_msgs.msg import DisplayTrajectory, Grasp, PlaceLocation
from moveit_msgs.srv import ApplyPlanningScene
from math import pi
from six.moves import input
from std_msgs.msg import String
from tf.transformations import quaternion_from_euler, euler_from_quaternion
from moveit_commander.conversions import pose_to_list
import numpy as np
import rospy
from sensor_msgs.msg import LaserScan
import socket, pickle
import actionlib 
# from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal


def all_close(goal, actual, tolerance):
  """
  Convenience method for testing if a list of values are within a tolerance of their counterparts in another list
  @param: goal       A list of floats, a Pose or a PoseStamped
  @param: actual     A list of floats, a Pose or a PoseStamped
  @param: tolerance  A float
  @returns: bool
  """
  all_equal = True
  if type(goal) is list:
    for index in range(len(goal)):
      if abs(actual[index] - goal[index]) > tolerance:
        return False

  elif type(goal) is geometry_msgs.msg.PoseStamped:
    return all_close(goal.pose, actual.pose, tolerance)

  elif type(goal) is geometry_msgs.msg.Pose:
    return all_close(pose_to_list(goal), pose_to_list(actual), tolerance)

  return True

class Controller(object):
  def __init__(self):
    moveit_commander.roscpp_initialize(sys.argv)
    rospy.init_node('moveit_python_interface')
    ## Get the name of the robot - this will be used to properly define the end-effector link when adding a box
    self.robot_model = rospy.get_param("~robot_model")
    self.robot_name = rospy.get_namespace().strip("/")
    self.ee_link_offset = rospy.get_param("~ee_link_offset")
    self.joint_goal = rospy.get_param("~joint_goal")
    pose_goal_raw = rospy.get_param("~pose_goal")
    # desired pose goal: pose_goal_raw=[x, y, z, roll, pitch, yaw] w.r.t the 'world' frame (eg pose_goal_raw = [0.2, 0.0, 0.25, 0, 0, 0]  )
    self.set_pose_goal(pose_goal_raw)
    print(self.pose_goal)


    ## Instantiate a `RobotCommander`_ object. This object is the outer-level interface to the robot:
    self.robot = moveit_commander.RobotCommander()

    ## Instantiate a `PlanningSceneInterface`_ object.  This object is an interface to the world surrounding the robot:
    self.scene = moveit_commander.PlanningSceneInterface()
    # self.scene.addBox(name='camera',size_x=0.2,size_y=0.2,size_z=0.2,x=0,y=0,z=0.6)

    group_name = "interbotix_arm"
    group_name2 = "interbotix_gripper"
    self.group = moveit_commander.MoveGroupCommander(group_name)
    self.group2 = moveit_commander.MoveGroupCommander(group_name2)
    self.group.set_max_velocity_scaling_factor(value=0.5)

    # self.group.allow_replanning(True)
    # self.group.set_goal_tolerance(0.005)
    # self.group.set_num_planning_attempts(planning_attempts)
    # self.group.set_planning_time(20)
    
    ## We create a `DisplayTrajectory`_ publisher which is used later to publish
    ## trajectories for RViz to visualize:
    self.display_trajectory_publisher = rospy.Publisher("move_group/display_planned_path",
                                                   moveit_msgs.msg.DisplayTrajectory,
                                                   queue_size=20)
    # self.camera_tilt_publisher = rospy.Publisher(f"/{self.robot_name}/tilt_controller/command",Float64,queue_size=20)
    self.camera_tilt_publisher = rospy.Publisher("/locobot/tilt_controller/command",Float64,queue_size=20)
    

    ## Getting Basic Information
    # We can get the name of the reference frame for this robot:
    self.planning_frame = self.group.get_planning_frame()
    # We can also print the name of the end-effector link for this group:
    self.eef_link = self.group.get_end_effector_link()
    # We can get a list of all the groups in the robot:
    self.group_names = self.robot.get_group_names()

    self.pick_command = None
    self.place_command = None

    self.tasks = [] # [id, grasp_pose, place_pose, done,attempts]
    self.ptr = {} # { id: ptr_to_tasks_list }

    # self.client = actionlib.SimpleActionClient('/locobot/move_base',MoveBaseAction)
    # self.client.wait_for_server()

  def go_to_named_pose(self,pose_name,group):
    group.set_named_target(pose_name)
    plan = group.go(wait=True)
    group.stop()
    group.clear_pose_targets()
    return True

  def move_base_cmd(self):
    goal = MoveBaseGoal()
    goal.target_pose.header.frame_id = "map"
    goal.target_pose.header.stamp = rospy.Time.now()
    # Move 0.5 meters forward along the x axis of the "map" coordinate frame 
    goal.target_pose.pose.position.x = 2.0
    # No rotation of the mobile base frame w.r.t. map frame
    goal.target_pose.pose.orientation.w = 5.0
    self.client.send_goal(goal)
    print("Goal")
    print(goal)
    wait = self.client.wait_for_result()
    print(wait)

  def update_pick_command(self,msg):
    print("&"*20)
    self.pick_command = msg
    print("Pick Command Received")

  def pick_and_place_routine(self,msg):
    print("%"*20)
    self.place_command = msg

    if self.pick_command and not self.pick_command.id == msg.id: 
      print("Something was lost")
      return
    print("Place Command Received")
   
    grasp_pose = self.pick_command.grasp_pose.pose
    place_pose = self.place_command.place_pose.pose

    id = str(round(grasp_pose.position.x,2)).replace('.','')+str(round(grasp_pose.position.y,2)).replace('.','')
    task = [id,grasp_pose,place_pose,False,0]
    
    if (id not in self.ptr): # if not tried that task before
      self.tasks.append(task)
      self.ptr[id] = len(self.tasks)-1
    if self.tasks[self.ptr[id]][3] == True: # done or not
        return

    # if new task, do this
    self.pick_and_place(id)


    return

  def pick_and_place(self,task_id=-1):
    # if task_if==-1, we have to sample a task from the list self.tasks
    if task_id != -1: 
      ptr = self.ptr[task_id]
      [id,grasp_pose,place_pose,done,attempts] = self.tasks[ptr]
    else:
      for i in range(len(self.tasks)):
        [id,grasp_pose,place_pose,done,attempts] = self.tasks[i]
        if done or ( not done and attempts>1): return
        if not done and attempts==0:
          task_id = id 
          break
        if not done and attempts==1:
          task_id = id
          grasp_pose.position.x += 0.01
          grasp_pose.position.y += 0.01
          break
      task_id = id  

    print("&"*200)
    print("TASKS LIST:")
    for i in range(len(self.tasks)):
      print(f"ID: {self.tasks[i][0]}, X: {self.tasks[i][1].position.x}, Y: {self.tasks[i][1].position.y}, DONE: {self.tasks[i][3]}, ATTEMPTS: {self.tasks[i][4]}")

    above_target = Pose()
    above_target.position.x = grasp_pose.position.x
    above_target.position.y = grasp_pose.position.y
    above_target.position.z = grasp_pose.position.z + 0.025
    above_target.orientation = grasp_pose.orientation
    # above_target_orientation = euler_from_quaternion([grasp_pose.orientation.x,grasp_pose.orientation.y,\
    #                                                   grasp_pose.orientation.z,grasp_pose.orientation.w])
    # quat = quaternion_from_euler(above_target_orientation[0],0,above_target_orientation[2])
    # above_target.orientation.x = quat[0]
    # above_target.orientation.y = quat[1]
    # above_target.orientation.z = quat[2]
    # above_target.orientation.w = quat[3]

    print("Going above target")
    self.set_pose_goal_quat(above_target)
    if self.go_to_pose_goal():
      if self.go_to_named_pose("Open",group=self.group2):
        print("Going to grasp pose")
        self.set_pose_goal_quat(grasp_pose)
        if self.go_to_pose_goal():
          if self.go_to_named_pose("Closed",group=self.group2):
            print("Going to place pose")
            self.set_pose_goal_quat(place_pose)
            if self.go_to_pose_goal():
              if self.go_to_named_pose("Open",group=self.group2):
                print("Complete Pick n Place Routine")
                done = True

    self.tasks[self.ptr[task_id]][3] = done
    self.tasks[self.ptr[task_id]][4] += 1

    self.go_to_named_pose("Sleep",group=self.group)
    self.group.set_named_target("Sleep")

  def pose_euler2quaternion(self,pose_euler):
      quat = quaternion_from_euler(pose_euler[3], pose_euler[4], pose_euler[5])
      pose = geometry_msgs.msg.Pose()
      pose.position.x = pose_euler[0]
      pose.position.y = pose_euler[1]
      pose.position.z = pose_euler[2]
      pose.orientation.x = quat[0]
      pose.orientation.y = quat[1]
      pose.orientation.z = quat[2]
      pose.orientation.w = quat[3]
      return pose

  def set_pose_goal(self,pose_euler):
      pose_quat = self.pose_euler2quaternion(pose_euler)
      self.pose_goal = pose_quat

  def set_pose_goal_quat(self,pose_quat):
      self.pose_goal = pose_quat

  def go_to_joint_goal(self):
    ## Planning to a Joint Goal

    # The go command can be called with joint values, poses, or without any
    # parameters if you have already set the pose or joint target for the group
    self.group.go(self.joint_goal, wait=True)
    # Calling ``stop()`` ensures that there is no residual movement
    self.group.stop()

    current_joints = self.group.get_current_joint_values()
    return all_close(self.joint_goal, current_joints, 0.01)

  def go_to_pose_goal(self):
    ## We can plan a motion for this group to a desired pose for the end-effector:

    self.group.set_pose_target(self.pose_goal)
    ## Now, we call the planner to compute the plan and execute it.
    plan = self.group.go(wait=True)
    # Calling `stop()` ensures that there is no residual movement
    self.group.stop()
    # It is always good to clear your targets after planning with poses.
    # Note: there is no equivalent function for clear_joint_value_targets()
    self.group.clear_pose_targets()

    current_pose = self.group.get_current_pose().pose
    return all_close(self.pose_goal, current_pose, 0.03)

  def go_to_defined_pose(self, msg):
      self.set_command_status(msg.command_id)

      target_pose = msg.target_pose # pose_quat

      self.set_pose_goal_quat(target_pose)
      self.group.set_pose_target(self.pose_goal)

      success = self.go_to_pose_goal()
      success = True
      self.set_command_status(msg.command_id,completed=True,success=success)

      return success

  def move_gripper(self, msg):
    self.set_command_status(msg.command_id)

    gripper_upper_limit = [0.03,0.03]
    gripper_lower_limit = [0,0]

    if msg.command == "open":
      gripper_position = gripper_upper_limit
    else:
      gripper_position = gripper_lower_limit

    self.group2.set_joint_value_target(gripper_position)
    self.group2.go()

    success = True

    self.set_command_status(msg.command_id,completed=True,success=success)

  def check_gripper_state(self,send_result=False):
    cur_gripper_position = self.group2.get_current_joint_values()

    min = 0.016
    max = 0.033
    error1 = (cur_gripper_position[0] - min) / (max - min)
    error2 = (cur_gripper_position[1] - (-min)) / ((-max) - (-min))
    error = (error1 + error2) / 2.0

    if error < 0.15:
        result = 'closed'
    elif error > 0.8:
        result = 'open'
    else:
        result = 'semi_closed'

    return result

  def control_motor_angles(self, desired_angles):
    #robot: waist, shoulder, elbow, wrist_angle, wrist_rotate
    #print(self.group.get_joint_value_target())
    #print(self.group.get_current_state())
    #print(self.group.get_current_joint_values())
    self.group.set_joint_value_target(desired_angles)
    plan = self.group.plan()[1]
    self.group.execute(plan, wait=True)

  def plan_cartesian_path(self, x_dir=1, z_dir=1):
    ## Cartesian Paths
    ## ^^^^^^^^^^^^^^^
    ## You can plan a Cartesian path directly by specifying a list of waypoints
    ## for the end-effector to go through:
    ##
    waypoints = []

    wpose = self.group.get_current_pose().pose
    wpose.position.z += z_dir * 0.1  # First move up (z)
    waypoints.append(copy.deepcopy(wpose))

    wpose.position.x += x_dir * 0.1  # Second move forward in (x)
    waypoints.append(copy.deepcopy(wpose))

    wpose.position.z -= z_dir * 0.1  # Third move down (z)
    waypoints.append(copy.deepcopy(wpose))

    # We want the Cartesian path to be interpolated at a resolution of 1 cm
    # which is why we will specify 0.01 as the eef_step in Cartesian
    # translation.  We will disable the jump threshold by setting it to 0.0 disabling:
    (plan, fraction) = self.group.compute_cartesian_path(
                                       waypoints,   # waypoints to follow
                                       0.01,        # eef_step
                                       0.0)         # jump_threshold

    # Note: We are just planning, not asking move_group to actually move the robot yet:
    return plan, fraction

  def display_trajectory(self, plan):
    ## Displaying a Trajectory
    ## ^^^^^^^^^^^^^^^^^^^^^^^
    ## You can ask RViz to visualize a plan (aka trajectory) for you. But the
    ## group.plan() method does this automatically so this is not that useful
    ## here (it just displays the same trajectory again):
    ##
    ## A `DisplayTrajectory`_ msg has two primary fields, trajectory_start and trajectory.
    ## We populate the trajectory_start with our current robot state to copy over
    ## any AttachedCollisionObjects and add our plan to the trajectory.
    display_trajectory = moveit_msgs.msg.DisplayTrajectory()
    display_trajectory.trajectory_start = self.robot.get_current_state()
    display_trajectory.trajectory.append(plan)
    # Publish
    self.display_trajectory_publisher.publish(display_trajectory);

  def set_command_status(self,command_id,completed=False,success=False):
      rospy.set_param('/command/received',True)
      rospy.set_param('/command/completed',completed)
      rospy.set_param('/command/success',success)

  def set_camera_for_manipulation(self):
    self.camera_tilt_publisher.publish(0.7)

def send_socket_msg(Message,address="localhost",port=9988):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((address, port))
    data_string = pickle.dumps(Message)
    s.send(data_string)
    s.close()

def main():
    while True:
      
      rospy.spin()

controller = Controller()

pick_command_subsciber = rospy.Subscriber("/"+controller.robot_name+"/pick_command", Grasp, controller.update_pick_command)
place_command_subsciber = rospy.Subscriber("/"+controller.robot_name+"/place_command", PlaceLocation, controller.pick_and_place_routine)

if __name__ == '__main__':
    time.sleep(3)
    # controller.move_base_cmd()
    # controller.set_camera_for_manipulation()
    controller.go_to_named_pose('Sleep',group=controller.group)
    print(controller.robot_name)

    main()
